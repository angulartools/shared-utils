import * as i0 from '@angular/core';
import { inject, signal, Injectable, effect, Pipe } from '@angular/core';
import { HttpClient } from '@angular/common/http';

class TranslationService {
    // Getter para o signal, para que o pipe e componentes possam usá-lo
    get currentLanguage() {
        return this.languageSignal;
    }
    get currentLang() {
        return this.languageSignal();
    }
    constructor() {
        this.http = inject(HttpClient);
        this.translations = {};
        // Signal para o idioma atual
        this.languageSignal = signal('pt-BR'); // Define o idioma padrão como inglês
        this.loadTranslations(this.languageSignal());
    }
    use(lang) {
        this.languageSignal.set(lang); // Atualiza o Signal
        this.loadTranslations(lang); // Carrega novas traduções
    }
    // Retorna uma string traduzida com base na chave
    getTranslation(key, params) {
        let translation = this.translations[key] || key; // Retorna a chave se a tradução não for encontrada
        // Substituir parâmetros dinâmicos, se houver
        if (params) {
            Object.keys(params).forEach((param) => {
                translation = translation.replace(`{{${param}}}`, params[param]);
            });
        }
        return translation;
    }
    instant(key, params) {
        return this.getTranslation(key, params);
    }
    loadTranslations(lang) {
        this.http
            .get(`assets/i18n/${lang}.json`)
            .subscribe((translations) => {
            this.translations = translations;
        });
    }
    getBrowserLang() {
        return window.navigator.language;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.0.6", ngImport: i0, type: TranslationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "19.0.6", ngImport: i0, type: TranslationService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.0.6", ngImport: i0, type: TranslationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [] });

class TranslationPipe {
    constructor() {
        this.translationService = inject(TranslationService);
        this.translatedText = ''; // Armazena a tradução atual
        this.currentKey = ''; // Variável para armazenar a chave atual
        // Recalcula a tradução sempre que o idioma mudar
        effect(() => {
            const lang = this.translationService.currentLanguage(); // Observa o Signal
            this.translatedText = this.translationService.instant(this.currentKey);
        });
    }
    transform(key) {
        // Atualizamos a chave de tradução atual
        this.currentKey = key;
        // Obtém a tradução atual
        return this.translationService.instant(key);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "19.0.6", ngImport: i0, type: TranslationPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "19.0.6", ngImport: i0, type: TranslationPipe, isStandalone: true, name: "translate", pure: false }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "19.0.6", ngImport: i0, type: TranslationPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'translate',
                    standalone: true,
                    pure: false
                }]
        }], ctorParameters: () => [] });

/*
 * Public API Surface of translation
 */

/**
 * Generated bundle index. Do not edit.
 */

export { TranslationPipe, TranslationService };
//# sourceMappingURL=angulartoolsdr-translation.mjs.map
