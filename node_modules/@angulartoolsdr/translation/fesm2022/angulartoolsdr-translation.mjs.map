{"version":3,"file":"angulartoolsdr-translation.mjs","sources":["../../../projects/translation/src/lib/translation.service.ts","../../../projects/translation/src/lib/translation.pipe.ts","../../../projects/translation/src/public-api.ts","../../../projects/translation/src/angulartoolsdr-translation.ts"],"sourcesContent":["import { inject, Injectable, Signal, signal } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TranslationService {\r\n\r\n  private http = inject(HttpClient);\r\n  private translations: { [key: string]: string } = {};\r\n\r\n  // Signal para o idioma atual\r\n  private languageSignal = signal<string>('pt-BR'); // Define o idioma padrão como inglês\r\n\r\n  // Getter para o signal, para que o pipe e componentes possam usá-lo\r\n  get currentLanguage(): Signal<string> {\r\n    return this.languageSignal;\r\n  }\r\n\r\n  get currentLang() {\r\n    return this.languageSignal();\r\n  }\r\n\r\n  constructor() {\r\n    this.loadTranslations(this.languageSignal());\r\n  }\r\n\r\n  use(lang: string): void {\r\n    this.languageSignal.set(lang); // Atualiza o Signal\r\n    this.loadTranslations(lang);   // Carrega novas traduções\r\n  }\r\n\r\n  // Retorna uma string traduzida com base na chave\r\n  getTranslation(key: string, params?: any): string {\r\n    let translation = this.translations[key] || key; // Retorna a chave se a tradução não for encontrada\r\n\r\n    // Substituir parâmetros dinâmicos, se houver\r\n    if (params) {\r\n      Object.keys(params).forEach((param) => {\r\n        translation = translation.replace(`{{${param}}}`, params[param]);\r\n      });\r\n    }\r\n\r\n    return translation;\r\n  }\r\n\r\n  instant(key: string, params?: any): string {\r\n    return this.getTranslation(key, params);\r\n  }\r\n\r\n  private loadTranslations(lang: string): void {\r\n    this.http\r\n      .get<{ [key: string]: string }>(`assets/i18n/${lang}.json`)\r\n      .subscribe((translations) => {\r\n        this.translations = translations;\r\n      });\r\n  }\r\n\r\n  getBrowserLang(){\r\n    return window.navigator.language;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform, effect, inject } from '@angular/core';\r\nimport { TranslationService } from './translation.service';\r\n\r\n@Pipe({\r\n  name: 'translate',\r\n  standalone: true,\r\n  pure: false\r\n})\r\nexport class TranslationPipe implements PipeTransform {\r\n\r\n  private translationService = inject(TranslationService);\r\n  private translatedText = ''; // Armazena a tradução atual\r\n\r\n  constructor() {\r\n    // Recalcula a tradução sempre que o idioma mudar\r\n    effect(() => {\r\n      const lang = this.translationService.currentLanguage(); // Observa o Signal\r\n      this.translatedText = this.translationService.instant(this.currentKey);\r\n    });\r\n  }\r\n\r\n  private currentKey: string = ''; // Variável para armazenar a chave atual\r\n\r\n  transform(key: string): string {\r\n    // Atualizamos a chave de tradução atual\r\n    this.currentKey = key;\r\n    // Obtém a tradução atual\r\n    return this.translationService.instant(key);\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of translation\r\n */\r\n\r\nexport * from './lib/translation.service';\r\nexport * from './lib/translation.pipe';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}